/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/admin.js":
/*!**********************!*\
  !*** ./src/admin.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let admin = (function() {\n\n  let self = {};\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n menu = function(){\n\n   $('#navBilan').on('click', function() {\n     let bilan = __webpack_require__(/*! ./admin/bilan.js */ \"./src/admin/bilan.js\");\n     bilan.init();\n     $(\".visible\").css(\"display\", \"none\");\n     $(\"#showBilan\").css(\"display\", \"block\");\n   });\n\n   $('#navParam').on('click', function() {\n     $(\".visible\").css(\"display\", \"none\");\n     $(\"#showParam\").css(\"display\", \"block\");\n   });\n\n   $('#navCompte').on('click', function() {\n     $(\".visible\").css(\"display\", \"none\");\n     $(\"#modifyPassword\").css(\"display\", \"block\");\n   });\n\n }\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function(){\n    // on met à jour la dataliste classes\n    let dataListe = __webpack_require__(/*! ./dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n    let el1 = document.querySelector('#dataListe1')\n    dataListe.set(el1 , { 'form' : true});\n    let el4 = document.querySelector('#dataListe4')\n    dataListe.set(el4);\n\n    $.get(\"/admin/tableClassesJSON/\", (data) => {\n      dataListe.setDataListe(el1,data);\n      dataListe.setDataListe(el4,data);\n    });\n\n     //liste matiere\n    let el2 = document.querySelector('#dataListe2')\n    dataListe.set(el2);\n    //liste professeur\n    let el3 = document.querySelector('#dataListe3')\n    dataListe.set(el3);\n\n    $('input').clearer(); //permet de réinitialiser les input\n\n\n    let structure=  __webpack_require__(/*! ./admin/structure.js */ \"./src/admin/structure.js\");\n    let professeurs=  __webpack_require__(/*! ./admin/param/professeurs.js */ \"./src/admin/param/professeurs.js\");\n    let eleves=  __webpack_require__(/*! ./admin/param/eleves.js */ \"./src/admin/param/eleves.js\");\n    let matieres=  __webpack_require__(/*! ./admin/param/matieres.js */ \"./src/admin/param/matieres.js\");\n    let equipesClasses=  __webpack_require__(/*! ./admin/param/equipesClasses.js */ \"./src/admin/param/equipesClasses.js\");\n\n    structure.init();\n    professeurs.init();\n    eleves.init();\n    matieres.init();\n    equipesClasses.init();\n    menu();\n  }\n  return self;\n})();\n\n\nmodule.exports = admin;\n\n\n//# sourceURL=webpack:///./src/admin.js?");

/***/ }),

/***/ "./src/admin/bilan.js":
/*!****************************!*\
  !*** ./src/admin/bilan.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let bilan = (function() {\n\n  let self = {};\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n  /*\n  **************************\n        Script pour afficher le bilan des heures effectuées sur une période\n   **************************\n   */\n  afficheBilan = function(data) {\n    let liste = data;\n    let table = $('#tableDecompte').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.nom + ' ' + data.prenom;\n          },\n        },\n        {\n          data: 'grade'\n        },\n        {\n          data: 'count'\n        },\n        {\n            data: null,\n            render: function(data, type, row) {\n              // Combine the first and last names into a single table field\n              return Math.floor(data.heures / 60) + 'h' + data.heures % 60 + 'mn';\n            },\n          },\n\n      ],\n      order: [\n        [0, \"asc\"]\n      ],\n    });\n\n    table.clear().draw();\n    table.rows.add(liste); // Add new data\n    table.columns.adjust().draw(); // Redraw the DataTable\n\n  };\n\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function() {\n    $.get(\"/admin/decompteHeuresJSON/\", (data) => {\n      afficheBilan(data);\n    });\n  }\n\n  return self;\n})();\n\n\nmodule.exports = bilan;\n\n\n//# sourceURL=webpack:///./src/admin/bilan.js?");

/***/ }),

/***/ "./src/admin/param/eleves.js":
/*!***********************************!*\
  !*** ./src/admin/param/eleves.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n**************************\n      En lien avec partialsAdmin/eleve.ejs\n **************************\n */\n\n\nlet eleves = (function() {\n\n  let self = {};\n  let dataListe = __webpack_require__(/*! ../../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n  let el = document.getElementById('dataListe4')\n  dataListe.selectId(el)\n\n  $('#dataListe4Select').on('change', function() {\n    let classe = dataListe.getName(el)\n    let id = dataListe.getId(el)\n    if (classe !== '') {\n      $('#showTableEleves').css(\"display\", \"block\");\n      refreshEleves(classe);\n    } else {\n      $('#showTableEleves').css(\"display\", \"none\");\n    }\n  });\n\n\n\n\n  function initDataTablesEleves() {\n    liste = [];\n    let table = $('#tableEleves').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.prenom + ' ' + data.nom;\n          },\n        },\n        {\n          data: 'login'\n        },\n        {\n          data: 'password'\n        },\n      ],\n    });\n\n    // Edit record\n    $('#tableEleves').on('click', 'a.editor_edit', function(e) {\n      e.preventDefault();\n      console.log($(this).closest('tr'));\n      //$('#modifierEleve').modal();\n    });\n\n  };\n\n\n  /*\n     **************************\n          Script pour afficher une classe\n      **************************\n      */\n  refreshEleves = function(classe) {\n    $.post(\"/admin/tableElevesClasseJSON/\", {\n      'classe': classe\n    }, (data) => {\n\n      $('#tableEleves').DataTable().clear().draw();\n      $('#tableEleves').DataTable().rows.add(data); // Add new data\n      $('#tableEleves').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  };\n\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function() {\n    initDataTablesEleves();\n  }\n\n  return self;\n})();\n\n\nmodule.exports = eleves;\n\n\n//# sourceURL=webpack:///./src/admin/param/eleves.js?");

/***/ }),

/***/ "./src/admin/param/equipesClasses.js":
/*!*******************************************!*\
  !*** ./src/admin/param/equipesClasses.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let equipesClasses = (function() {\n\n  let self = {};\n  let dataListe = __webpack_require__(/*! ../../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n\n  let el1 = document.getElementById('dataListe1')\n  dataListe.selectId(el1)\n  let el2 = document.getElementById('dataListe2')\n  dataListe.selectId(el2)\n  let el3 = document.getElementById('dataListe3')\n  dataListe.selectId(el3)\n\n\n\n\n  document.getElementById(\"modalAddMatiere\").addEventListener('click', function() {\n    $('#addMatiereClasse').modal();\n  });\n\n\n  $('#dataListe1Form').submit(function(e) {\n    e.preventDefault();\n    let classe = dataListe.getName(el1)\n    let id = dataListe.getId(el1)\n    if (classe !== '') {\n      $('#showTableEquipeClasse').css(\"display\", \"block\");\n      refreshTableEquipeClasse(classe);\n    } else {\n      $('#showTableEquipeClasse').css(\"display\", \"none\");\n    }\n  });\n\n\n  $('#addMatiereForm').submit(function(e) {\n    e.preventDefault();\n    let classe = dataListe.getName(el1);\n    let idClasse = dataListe.getId(el1);\n    let idMatiere = dataListe.getId(el2);\n    let idProfesseur = dataListe.getId(el3);\n    let duree = document.getElementById('duree').value;\n    $.post(\"/admin/addMatiereClasseJSON/\", {\n      'idClasse': idClasse,\n      'idMatiere': idMatiere,\n      'idProfesseur': idProfesseur,\n      'duree': duree,\n    }, (message) => {\n\n      if (message.error !== \"ok\") {\n        $('#error').html(message.error);\n        $('#erreur').modal();\n      } else {\n        document.getElementById('addMatiereForm').reset();\n        $('#addMatiereClasse').modal('hide');\n        refreshTableEquipeClasse(classe);\n      }\n    });\n  });\n\n\n  /*\n  **************************\n        Script pour afficher une classe\n   **************************\n   */\n\n  function initDataTablesEquipeClasse() {\n    liste = [];\n    let table = $('#tableEquipeClasse').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: 'matiere'\n        },\n        {\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.nom + ' ' + data.prenom;\n          },\n        },\n        {\n          data: 'duree'\n        },\n        {\n          data: 'dureeExc'\n        },\n      ],\n    });\n\n    table.columns(3).visible(false);\n  };\n\n  refreshTableEquipeClasse = function(classe) {\n    $.post(\"/admin/tableEquipeClasseJSON/\", {\n      'classe': classe\n    }, (data) => {\n      let table = $('#tableEquipeClasse').DataTable();\n      let button = document.getElementById('buttonAddSuppPeriode');\n      if(data.length!==0){\n        if (data[0].extraPeriode === false) {\n          table.columns(3).visible(false);\n          button.setAttribute(\"data-action\", \"ajouter\");\n          button.innerHTML = 'Ajouter une période';\n          document.getElementById(\"defExtraPeriode\").style.display = \"none\";\n        } else {\n          table.columns(3).visible(true);\n          button.setAttribute(\"data-action\", \"supprimer\");\n          button.innerHTML = 'Supprimer la période';\n          let debutPeriode=$('#datetimepicker7').find(\"input\").val(moment(data[0].debutPeriode).format('DD/MM/YYYY'));\n          let finPeriode=$('#datetimepicker8').find(\"input\").val(moment(data[0].finPeriode).format('DD/MM/YYYY'));\n          document.getElementById(\"defExtraPeriode\").style.display = \"block\";\n        }\n      }\n\n      table.clear().draw();\n      table.rows.add(data); // Add new data\n      table.columns.adjust().draw(); // Redraw the DataTable\n    });\n  };\n\n  /*\n  **************************\n      Bouton pour ajouter ou supprimer extraPeriode\n   **************************\n   */\n  $('#buttonAddSuppPeriode').click(function() {\n    let table = $('#tableEquipeClasse').DataTable();\n    let action = this.getAttribute(\"data-action\");\n    let extraPeriode;\n    if (action === 'ajouter') {\n      table.columns(3).visible(true);\n      extraPeriode = true;\n      document.getElementById(\"defExtraPeriode\").style.display = \"block\";\n      this.setAttribute(\"data-action\", \"supprimer\");\n      this.innerHTML = 'Supprimer la période';\n    } else {\n      table.columns(3).visible(false);\n      extraPeriode = false;\n      document.getElementById(\"defExtraPeriode\").style.display = \"none\";\n      this.setAttribute(\"data-action\", \"ajouter\");\n      this.innerHTML = 'Ajouter une période';\n    }\n    let el1 = document.getElementById('dataListe1');\n    let idClasse = dataListe.getId(el1);\n    $.post(\"/admin/changeExtraPeriode/\", {\n      'idClasse': idClasse,\n      'extraPeriode': extraPeriode,\n    }, () => {});\n  });\n\n\n\n  $('#datetimepicker7').datetimepicker({\n    format: 'L',\n  });\n  $('#datetimepicker8').datetimepicker({\n    format: 'L',\n    useCurrent: false\n  });\n  $(\"#datetimepicker7\").on(\"change.datetimepicker\", function(e) {\n    $('#datetimepicker8').datetimepicker('minDate', e.date);\n  });\n  $(\"#datetimepicker8\").on(\"change.datetimepicker\", function(e) {\n    $('#datetimepicker7').datetimepicker('maxDate', e.date);\n  });\n\n\n  $('#defExtraPeriodeForm').submit(function(e) {\n    e.preventDefault();\n    let debutPeriode=$('#datetimepicker7').find(\"input\").val();\n    let finPeriode=$('#datetimepicker8').find(\"input\").val();\n    let el1 = document.getElementById('dataListe1');\n    let idClasse = dataListe.getId(el1);\n    $.post(\"/admin/defExtraPeriode/\", {\n      'idClasse': idClasse,\n      'debutPeriode': debutPeriode,\n      'finPeriode': finPeriode,\n    }, () => {});\n  });\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function() {\n    initDataTablesEquipeClasse();\n  }\n\n  return self;\n})();\n\n\nmodule.exports = equipesClasses;\n\n\n//# sourceURL=webpack:///./src/admin/param/equipesClasses.js?");

/***/ }),

/***/ "./src/admin/param/matieres.js":
/*!*************************************!*\
  !*** ./src/admin/param/matieres.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let matieres = (function() {\n\n  let self = {};\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n   afficheMatieres= function(data) {\n       let liste = data;\n       let table = $('#tableMatieres').DataTable({\n         retrieve: true,\n         data: liste,\n         // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n         language: {\n           processing: \"Traitement en cours...\",\n           search: \"Rechercher&nbsp;:\",\n           lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n           info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n           infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n           infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n           infoPostFix: \"\",\n           loadingRecords: \"Chargement en cours...\",\n           zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n           emptyTable: \"Aucune donnée disponible dans le tableau\",\n           paginate: {\n             first: \"Premier\",\n             previous: \"Pr&eacute;c&eacute;dent\",\n             next: \"Suivant\",\n             last: \"Dernier\"\n           },\n           aria: {\n             sortAscending: \": activer pour trier la colonne par ordre croissant\",\n             sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n           }\n         },\n\n         columns: [{\n             data: 'nom'\n           },\n           {\n             data: 'generique'\n           },\n         ],\n       });\n\n       table.clear().draw();\n       table.rows.add(liste); // Add new data\n       table.columns.adjust().draw(); // Redraw the DataTable\n   };\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function(){\n    let dataListe = __webpack_require__(/*! ../../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n    $.get(\"/admin/tableMatieresJSON/\", (data) => {\n        let el=document.getElementById('dataListe2')\n        dataListe.setDataListe(el,data);\n      afficheMatieres(data);\n    });\n  }\n\n  return self;\n})();\n\n\nmodule.exports = matieres;\n\n/*\n**************************\n      Script pour afficher les matieres\n **************************\n */\n\n\n//# sourceURL=webpack:///./src/admin/param/matieres.js?");

/***/ }),

/***/ "./src/admin/param/professeurs.js":
/*!****************************************!*\
  !*** ./src/admin/param/professeurs.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let professeurs = (function() {\n\n  let self = {};\n  let dataListe = __webpack_require__(/*! ../../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n  let loginPassword = __webpack_require__(/*! ../../loginPassword.js */ \"./src/loginPassword.js\");\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n\n  /*\n  **************************\n        gestion du formulaire pour ajout d'un professeur\n   **************************\n   */\n  $('#ajouterProfesseurForm').submit(function(e) {\n    e.preventDefault();\n    let nom = document.querySelector('#ajouterProfesseurForm input[name=\"nom\"]').value.toLowerCase();\n    let prenom = document.querySelector('#ajouterProfesseurForm input[name=\"prenom\"]').value.toLowerCase();\n    let grade = document.querySelector('#ajouterProfesseurForm input[name=\"grade\"]').value.toLowerCase();\n    let login = loginPassword.createLogin(prenom, nom)\n    $.post(\"/users/creerProfesseur\", {\n      \"nom\": nom,\n      \"prenom\": prenom,\n      \"login\": login\n    }, (data) => {\n      let login = data.login;\n      let password = data.password;\n      if (data.message !== '') {\n        $('#error').html(data.message);\n        $('#erreur').modal();\n      }\n      document.querySelector('#validerProfesseurForm input[name=\"login\"]').value = login;\n      document.querySelector('#validerProfesseurForm input[name=\"password\"]').value = password;\n      $('#validerProfesseurForm').css(\"display\", \"block\");\n    });\n  });\n\n\n  $('#validerProfesseurForm').submit(function(e) {\n    e.preventDefault();\n    let nom = document.querySelector('#ajouterProfesseurForm input[name=\"nom\"]').value.toLowerCase();\n    let prenom = document.querySelector('#ajouterProfesseurForm input[name=\"prenom\"]').value.toLowerCase();\n    let grade = document.querySelector('#ajouterProfesseurForm input[name=\"grade\"]').value.toLowerCase();\n    let login = document.querySelector('#validerProfesseurForm input[name=\"login\"]').value;\n    let password = document.querySelector('#validerProfesseurForm input[name=\"password\"]').value;\n    $.post(\"/users/validerProfesseur\", {\n      \"nom\": nom,\n      \"prenom\": prenom,\n      \"login\": login,\n      \"password\": password,\n      \"grade\": grade,\n    }, () => {\n      console.log('ok');\n      $('#validerProfesseurForm')[0].reset();\n      $('#ajouterProfesseurForm')[0].reset();\n      refreshProfesseurs();\n    });\n  });\n  /*\n  **************************\n        affichage de la table\n   **************************\n   */\n\n   function formatColles(d) {\n     // `d` is the original data object for the row\n     let table = '<table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"padding-left:50px;\">';\n     for(i=0;i<d.colles.length;i++){\n       table+=\n         '<tr>' +\n         '<td>colles:</td>' +\n         '<td>' + d.colles[i].classe + '-' + d.colles[i].matiere + '</td>' +\n         '</tr>' ;\n     }\n\n       table+='</table>';\n       return table;\n   };\n  function initDataTablesProfesseurs() {\n    liste = [];\n    let table = $('#tableProfesseurs').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.prenom + ' ' + data.nom;\n          },\n        },\n        {\n          data: 'login'\n        },\n        {\n          data: null,\n          render: function(data, type, row) {\n            if (data.changePwd === true) {\n              return '....';\n            } else {\n              return data.password;\n            }\n          }\n        },\n        {\n          data: 'grade'\n        },\n        {\n          data: 'email'\n        },\n        {\n          \"className\": 'details-control',\n          \"orderable\": false,\n          \"data\": null,\n          \"defaultContent\": ''\n        },\n        {\n          data: null,\n          className: \"center\",\n          defaultContent: '<a href=\"\" class=\"editor_edit\">Edit</a>'\n        }\n      ],\n      order: [\n        [0, \"asc\"]\n      ],\n    });\n\n    // Edit record\n    $('#tableProfesseurs').on('click', 'a.editor_edit', function(e) {\n      e.preventDefault();\n      console.log($(this).closest('tr'));\n      $('#modifierProfesseur').modal();\n    });\n\n    $('#tableProfesseurs tbody').on('click', 'td.details-control', function() {\n      var tr = $(this).closest('tr');\n      var row = table.row(tr);\n      if (row.child.isShown()) {\n        // This row is already open - close it\n        row.child.hide();\n        tr.removeClass('shown');\n      } else {\n        // Open this row\n        row.child(formatColles(row.data())).show();\n        tr.addClass('shown');\n      }\n    });\n\n  };\n\n  /*\n     **************************\n           Script pour afficher la table professeurs\n      **************************\n      */\n  refreshProfesseurs = function() {\n    $.get(\"/admin/tableProfesseursJSON/\", (data) => {\n\n      //on met à jour les datalistes correspondantes\n      let el3 = document.getElementById('dataListe3')\n      dataListe.setDataListe(el3, data);\n\n      $('#tableProfesseurs').DataTable().clear().draw();\n      $('#tableProfesseurs').DataTable().rows.add(data); // Add new data\n      $('#tableProfesseurs').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  };\n\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function() {\n    initDataTablesProfesseurs();\n    refreshProfesseurs();\n  }\n\n  return self;\n})();\n\n\nmodule.exports = professeurs;\n\n\n//# sourceURL=webpack:///./src/admin/param/professeurs.js?");

/***/ }),

/***/ "./src/admin/structure.js":
/*!********************************!*\
  !*** ./src/admin/structure.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let structure = (function() {\n\n  let self = {};\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n   /*\n   **************************\n         Script pour afficher la sructure des classes\n    **************************\n    */\n   self.afficheStructure = function(){\n     $.get(\"/admin/tableStructureJSON/\", (data) => {\n       let liste = data;\n       if (typeof liste === 'undefined') {\n         liste = []\n       };\n\n       let table = $('#tableStructure').DataTable({\n         retrieve: true,\n         data: liste,\n         // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n         language: {\n           processing: \"Traitement en cours...\",\n           search: \"Rechercher&nbsp;:\",\n           lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n           info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n           infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n           infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n           infoPostFix: \"\",\n           loadingRecords: \"Chargement en cours...\",\n           zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n           emptyTable: \"Aucune donnée disponible dans le tableau\",\n           paginate: {\n             first: \"Premier\",\n             previous: \"Pr&eacute;c&eacute;dent\",\n             next: \"Suivant\",\n             last: \"Dernier\"\n           },\n           aria: {\n             sortAscending: \": activer pour trier la colonne par ordre croissant\",\n             sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n           }\n         },\n\n         columns: [{\n             data: 'nom'\n           },\n           {\n             data: 'classe[0].niveau'\n           },\n           {\n             data: 'total'\n           },\n           {\n               data: null,\n               render: function(data, type, row) {\n                 // Combine the first and last names into a single table field\n                 return '';\n               },\n           },\n         ],\n       });\n\n       table.clear().draw();\n       table.rows.add(liste); // Add new data\n       table.columns.adjust().draw(); // Redraw the DataTable\n     });\n   };\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function(){\n    self.afficheStructure();\n  }\n\n  return self;\n})();\n\n\nmodule.exports = structure;\n\n\n//# sourceURL=webpack:///./src/admin/structure.js?");

/***/ }),

/***/ "./src/dataListe/dataListe.js":
/*!************************************!*\
  !*** ./src/dataListe/dataListe.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let dataListe = (function() {\n  let self = {};\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n  setHTML = function(id, html) {\n    $('#' + id + 'liste').empty()\n    $('#' + id + 'liste').append(html)\n  }\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n\n\n  self.set = function(element, options = {\n    'form': false,\n    'display': true\n  }) {\n    //initialiser le champ input lié à datalist\n    let id = element.id;\n    let idListe = id + \"liste\";\n    let idSelect = id + \"Select\";\n    let idhidden = id + \"answer-hidden\";\n    let type = $(element).data(\"type\");\n    let placeholder = $(element).data(\"placeholder\");\n    let html = '';\n    let idForm = '';\n    if (options.display === false) {\n      $(element).css(\"display\", \"none\");\n    }else {\n      $(element).css(\"display\", \"block\");\n    }\n    if (options.form === true) {\n      idForm = id + \"Form\";\n      html = \"<form id=\" + idForm + \"></form>\"\n      $(element).empty();\n      $(element).append(html);\n      element = element.childNodes[0];\n    }\n\n    html = \"<div class='form-group'>\\\n       <input type='text' list=\" + idListe + \" id=\" + idSelect + \"  autocomplete='off' required value='' class='form-control' placeholder='\" + placeholder + \"' name='\" + type + \"'><input type='hidden' required value='' name='answer' id=\" + idhidden + \" /> \\\n       <datalist id=\" + idListe + \" ></datalist></div>\"\n\n    $(element).empty();\n    $(element).append(html);\n    if (options.form === true) {\n      $('#' + idSelect).wrap(\"<div class='input-group'></div>\");\n      $('#' + idSelect).after('<a href=\"#\" class=\"input-group-append\"><button class=\"btn btn-primary\" type=\"submit\">Valider</button></a>');\n    };\n  }\n\n\n\n  self.readOnly = function(element, value) {\n    //permet de passer le inputSelect à readonly ou non\n    let id = element.id;\n    let idSelect = id + \"Select\";\n    $(\"#\" + idSelect).prop(\"readonly\", value);\n  }\n\n  self.display = function(element, value) {\n    //permet de rendre visible ou non la dataliste value boolean\n    if (value === false) {\n      $(element).css(\"display\", \"none\");\n    }else {\n      $(element).css(\"display\", \"block\");\n    }\n\n  }\n\n\n\n  /*\n  **************************\n        les différentes dataListe en fonction de l'attribut data\n   **************************\n   */\n\n  self.setDataListe = function(element, data) {\n    let id = element.id;\n    let type = $(element).data(\"type\")\n    html = '';\n    if (data.length === 0) {\n      // $(\"#error\").html(\"<p>Vous n'avez pas encore de matières dans la base</p><p>Créer une nouvlle matière</p>\");\n      // $('#erreur').modal(\"show\");\n\n    } else {\n      if (type === 'matiere') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i]._id + \"'>\" + data[i].nom + \"</option>\";\n        }\n      } else if (type === 'eleve') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i]._id + \"'>\" + data[i].nom + ' ' + data[i].prenom + \"</option>\";\n        }\n      } else if (type === 'professeur') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i]._id + \"'>\" + data[i].nom + ' ' + data[i].prenom + \"</option>\";\n        }\n      } else if (type === 'classe') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i]._id + \"'>\" + data[i].nom + \"</option>\";\n        }\n      } else if (type === 'classematiere') {\n        console.log(data);\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i]._id + \"'>\" + data[i].matiere.nom +'--' + data[i].professeur.nom +' ' + data[i].professeur.prenom + \"</option>\";\n        }\n      } else if (type === 'classematierecoordo') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i].idClasseMatiere + \"'>\" + data[i].classe + '-' + data[i].matiere + \"</option>\";\n        }\n      } else if (type === 'classematierecolleur') {\n        for (i = 0; i < data.length; i++) {\n          html += \"<option data-value='\" + data[i].idClasseMatiere + \"'>\" + data[i].classe + '-' + data[i].matiere + \"</option>\";\n        }\n      }\n    }\n    setHTML(id, html);\n  }\n\n\n\n\n\n  self.selectId = function(idElement) {\n    let id = idElement.id;\n    let inputId = id + 'Select';\n    let inputHiddenId = id + 'answer-hidden';\n    let message = $(idElement).data(\"message\")\n    document.querySelector('#' + inputId).addEventListener('input', function(e) {\n      let input = e.target,\n        list = input.getAttribute('list'),\n        options = document.querySelectorAll('#' + list + ' option'),\n        hiddenInput = document.getElementById(inputHiddenId),\n        label = input.value;\n      hiddenInput.value = label;\n\n      input.setCustomValidity(message);\n      for (let i = 0; i < options.length; i++) {\n        let option = options[i];\n\n        if (option.innerText === label) {\n          hiddenInput.value = option.getAttribute('data-value');\n          input.setCustomValidity('');\n          break;\n        }\n      }\n    });\n  };\n\n  self.getId = function(idElement) {\n    let id = idElement.id;\n    let inputHiddenId = id + 'answer-hidden';\n    return document.getElementById(inputHiddenId).value;\n  };\n\n  self.getName = function(idElement) {\n    let id = idElement.id;\n    let inputId = id + 'Select';\n    return document.getElementById(inputId).value;\n  }\n\n  self.setName = function(element, value) {\n    let id = element.id;\n    let inputId = id + \"Select\";\n    $(\"#\" + inputId).val(value);\n  }\n\n/*\ndtaliste spéciale pour gérer la notation de 0 à 20\n */\n\n self.selectNotes = function(idElement) {\n   let id = idElement.id;\n   let inputId = id + 'Select';\n   let message = \"note invalide\"\n   document.querySelector('#' + inputId).addEventListener('input', function(e) {\n     let input = e.target,\n       list = input.getAttribute('list'),\n       options = document.querySelectorAll('#' + list + ' option'),\n       label = input.value;\n\n     input.setCustomValidity(message);\n     for (let i = 0; i < options.length; i++) {\n       let option = options[i];\n\n       if (option.value == label) {\n         input.setCustomValidity('');\n         break;\n       }\n     }\n   });\n };\n\n\n   self.setNotes = function(element) {\n     //créé une dataliste pour les notes de 0 à 20 + n.n. (non noté et abs)\n     let id = element.id;\n     let idListe = id + \"liste\";\n     let idSelect = id + \"Select\";\n     let type = $(element).data(\"type\");\n     let html = '';\n\n     html = \"<div class='form-group'><label>Note :</label><input type='text' list=\" + idListe + \" id=\" + idSelect + \"  autocomplete='off' required value='' class='form-control' name='\" + type + \"'><datalist id=\" + idListe + \" ></datalist></div>\"\n     $(element).empty();\n     $(element).append(html);\n     html='';\n     html += \"<option value='n.n'></option>\";\n     html += \"<option value='abs.'></option>\";\n     for (i = 0; i < 21; i++) {\n       html += \"<option value='\" + i + \"'></option>\";\n     }\n     setHTML(id, html); //on insère la datalistelet id = idElement.id;\n     let inputId = id + 'Select';\n     return document.getElementById(inputId).value;\n   }\n\n\n   self.getNote =function(element){\n     let id = element.id;\n     let inputId = id + 'Select';\n     return document.getElementById(inputId).value;\n   }\n\n   self.setLaNote = function(element, value) {\n     let id = element.id;\n     let inputId = id + \"Select\";\n     $(\"#\" + inputId).val(value);\n   }\n\n  return self;\n})();\n\nmodule.exports = dataListe;\n\n\n//# sourceURL=webpack:///./src/dataListe/dataListe.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("$(document).ready(() => {\n\n\n  let professeur = __webpack_require__(/*! ./professeur.js */ \"./src/professeur.js\");\n  let admin = __webpack_require__(/*! ./admin.js */ \"./src/admin.js\");\n\n  //gestion password\n  let loginPassword = __webpack_require__(/*! ./loginPassword.js */ \"./src/loginPassword.js\");\n  loginPassword.init();\n\n  if ($('body').data(\"page\") === 'professeur') {\n    professeur.init();\n  }\n  if ($('body').data(\"page\") === 'admin') {\n    admin.init();\n  }\n\n});\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/loginPassword.js":
/*!******************************!*\
  !*** ./src/loginPassword.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let loginPassword = (function() {\n  let self = {};\n\n\n\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n  $('#modifyPasswordForm').submit(function(e) {\n    e.preventDefault();\n    let password = document.querySelector('#modifyPasswordForm input[name=\"password\"]').value;\n    let passwordConf = document.querySelector('#modifyPasswordForm input[name=\"passwordConf\"]').value;\n    let regexp = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])([a-zA-Z0-9]{8,})$/;\n    if (password.match(regexp) == null) {\n      $('#error').html('le mot de passe doit contenir au minimum 8 caratères dont une majuscule, une minuscule et un chiffre.');\n      $('#erreur').modal();\n    } else if (password !== passwordConf) {\n      $('#error').html('les mots de passe doivent être identiques');\n      $('#erreur').modal();\n    } else {\n      $.post(\"/users/modifyPassword\", {\n        'password': password,\n        'passwordConf': passwordConf,\n      }, (message) => {\n        if (message == null || message == '') {\n          $('#error').html('Votre mot de passe a été modifié');\n          $('#erreur').modal();\n        }\n      });\n    }\n  });\n\n\n\n  //\n  // function foo(){\n  //\n  // }\n  // alert(foo(chaine))\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.createLogin = function(prenom, nom) {\n    let tab1 = \"ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ\";\n    let tab2 = \"aaaaaaaaaaaaooooooooooooeeeeeeeecciiiiiiiiuuuuuuuuynn\";\n    rep2 = tab1.split('');\n    rep = tab2.split('');\n    myarray = new Array();\n    var i = -1;\n    while (rep2[++i]) {\n      myarray[rep2[i]] = rep[i];\n    }\n    myarray['Œ'] = 'OE';\n    myarray['œ'] = 'oe';\n    myarray[' '] = '-';\n    let p = prenom.replace(/./g, function($0) {\n      return (myarray[$0]) ? myarray[$0] : $0\n    });\n    let n = nom.replace(/./g, function($0) {\n      return (myarray[$0]) ? myarray[$0] : $0\n    });\n    return p + '.' + n\n  };\n\n\n\n  self.init = function() {\n\n  };\n\n\n  return self;\n})();\n\nmodule.exports = loginPassword;\n\n\n//# sourceURL=webpack:///./src/loginPassword.js?");

/***/ }),

/***/ "./src/professeur.js":
/*!***************************!*\
  !*** ./src/professeur.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let professeur = (function() {\n\n  let self = {};\n  let idProfesseur = document.body.getAttribute(\"data-idprofesseur\");\n  let dataListe = __webpack_require__(/*! ./dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n  /*\n  **************************\n        PRIVATE\n   **************************\n   */\n\n  function menu() {\n\n    //parametrage colleur - professeur\n    let paramCollesClasses = __webpack_require__(/*! ./professeur/paramCollesClasses.js */ \"./src/professeur/paramCollesClasses.js\");\n    //affichage du decompte\n    let decompteHeures = __webpack_require__(/*! ./professeur/decompteHeures.js */ \"./src/professeur/decompteHeures.js\");\n\n    $('#navColles').on('click', function() {\n      $(\".visible\").css(\"display\", \"none\");\n      $(\"#showColles\").css(\"display\", \"block\");\n    });\n\n    $('#navParam').on('click', function() {\n      $(\".visible\").css(\"display\", \"none\");\n      paramCollesClasses.refreshTableMesCollesClasses();\n      $(\"#showParam\").css(\"display\", \"block\");\n    });\n\n    $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n      let id=this.getAttribute(\"href\");\n      if(id==='#3ac'){\n        decompteHeures.refreshTableDecompteHeures()\n      }\n    });\n\n\n    $('#navCompte').on('click', function() {\n      $(\".visible\").css(\"display\", \"none\");\n      $(\"#modifyPassword\").css(\"display\", \"block\");\n    });\n\n  }\n\n  /*\n  ********************************************************************\n    Obtention de la liste de mes classes en tant que coordo\n  ************************************************************\n    */\n  function getListeClassesCoordo() {\n    $.post(\"/professeur/tableClassesCoordoJSON/\", {\n      'idProfesseur': idProfesseur,\n    }, (data) => {\n      let el5 = document.getElementById('dataListe5')\n      dataListe.setDataListe(el5, data);\n      let el7 = document.getElementById('dataListe7')\n      dataListe.setDataListe(el7, data);\n    });\n  }\n\n  /*\n  **************************\n        PUBLIC\n   **************************\n   */\n\n  self.init = function() {\n    // addEventListener pour les boutons déclenchant les modals\n    //\n    document.getElementById(\"buttonAddClasse\").addEventListener('click', function() {\n      document.getElementById('addClasseForm').reset();\n      let el4 = document.querySelector('#dataListe4') //liste des matières   partialsParamColles/formAddColleClasse\n      dataListe.display(el4,false);\n      $('#addClasseProfesseur').modal();\n    });\n\n    document.getElementById(\"buttonAddColle\").addEventListener('click', function() {\n      document.getElementById('addColleForm').setAttribute(\"data-mode\", \"ajouter\");\n      document.getElementById('addColleForm').setAttribute(\"data-idcolle\", '');\n      let el2 = document.getElementById('dataListe2')\n      dataListe.readOnly(el2, false);\n      document.getElementById('addColleForm').reset();\n      $('#addColleModal').modal();\n    });\n\n    //on initialise les dataListes\n    let el1 = document.querySelector('#dataListe1') //liste des colles/classe  du professeur : addColles\n    dataListe.set(el1, {\n      'form': true\n    });\n    let el2 = document.querySelector('#dataListe2') //liste des élèves formAddColle\n    dataListe.set(el2);\n    let el3 = document.querySelector('#dataListe3') //liste des classes partialsParamColles/formAddColleClasse\n    dataListe.set(el3, {\n      'form': true\n    });\n    let el4 = document.querySelector('#dataListe4') //liste des matières   partialsParamColles/formAddColleClasse\n    dataListe.set(el4, {\n      'display': false\n    });\n\n    let el5 = document.querySelector('#dataListe5') //liste des classes matières du coordonateur de discipline\n    dataListe.set(el5, {\n      'form': true\n    });\n\n    let el6 = document.querySelector('#dataListe6') //liste des notes\n    dataListe.setNotes(el6);\n\n    let el7 = document.querySelector('#dataListe7') //liste des classes matières du coordonateur de discipline\n    dataListe.set(el7, {\n      'form': true\n    });\n\n    $('input').clearer(); //permet de réinitialiser les input\n\n    //remplir la dataliste du coordo\n    getListeClassesCoordo()\n    //parametrage colleur - professeur\n    let paramCollesClasses = __webpack_require__(/*! ./professeur/paramCollesClasses.js */ \"./src/professeur/paramCollesClasses.js\");\n    paramCollesClasses.init();\n    //parametrage mesClasse\n    let paramMesClasses = __webpack_require__(/*! ./professeur/paramMesClasses.js */ \"./src/professeur/paramMesClasses.js\");\n    paramMesClasses.init();\n    //gestion des colles\n    let colles = __webpack_require__(/*! ./professeur/colles.js */ \"./src/professeur/colles.js\");\n    colles.init();\n    let synthese = __webpack_require__(/*! ./professeur/synthese.js */ \"./src/professeur/synthese.js\");\n    synthese.init();\n    let resultats = __webpack_require__(/*! ./professeur/resultats.js */ \"./src/professeur/resultats.js\");\n    resultats.init();\n    let decompteHeures = __webpack_require__(/*! ./professeur/decompteHeures.js */ \"./src/professeur/decompteHeures.js\");\n    decompteHeures.init();\n\n    menu();\n    $('#datetimepicker1').datetimepicker({\n      format: 'L'\n    });\n  }\n\n  return self;\n})();\n\n\nmodule.exports = professeur;\n\n\n//# sourceURL=webpack:///./src/professeur.js?");

/***/ }),

/***/ "./src/professeur/colles.js":
/*!**********************************!*\
  !*** ./src/professeur/colles.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let colles = (function() {\n\n  let self = {};\n  let idProfesseur =  document.body.getAttribute(\"data-idprofesseur\");\n  let dataListe = __webpack_require__(/*! ../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n\n  /*\n  ********************************************************************\n        PRIVE\n  ************************************************************\n********************************************************************\n      validation des datalistes\n************************************************************\n    */\n\n\n  let el1 = document.getElementById('dataListe1') //validation de la liste des collesClasse du professeur\n  dataListe.selectId(el1)\n  let el2 = document.getElementById('dataListe2') //validation de la  liste des élèves\n  dataListe.selectId(el2)\n  let el6 = document.getElementById('dataListe6') //liste des notes\n  dataListe.selectNotes(el6)\n\n  /*\n  ********************************************************************\n        Choix d'une matiere pour le colleur et récupération de la liste des élèves\n  ************************************************************\n  */\n\n  $('#dataListe1Form').submit(function(e) {\n    e.preventDefault();\n    let el1 = document.getElementById('dataListe1') //liste des collesClasse du professeur\n    let colle = dataListe.getName(el1);\n    let idColle = dataListe.getId(el1);\n    if (idColle != '' && typeof idColle !== 'undefined') {\n      $.post(\"/professeur/listeElevesJSON/\", {\n        'idColle': idColle,\n        'idProfesseur': idProfesseur,\n      }, (data) => {\n        let el2 = document.getElementById('dataListe2')\n        dataListe.setDataListe(el2, data);\n        if (colle != '') {\n          $('#tabGestionColles').css(\"display\", \"block\");\n          refreshTableColle(idColle);\n        } else {\n          $('#tabGestionColles').css(\"display\", \"none\");\n        }\n      });\n    }\n  });\n\n\n\n  /*\n  ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n  Validation du formulaire pour ajouterModifier  une colle **\n  ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n  */\n\n  $('#addColleForm').submit(function(e) {\n    e.preventDefault();\n    let el1 = document.getElementById('dataListe1')\n    let idMatiereColle = dataListe.getId(el1);\n    let el2 = document.getElementById('dataListe2')\n    let idEleve = dataListe.getId(el2);\n    let date = moment(document.getElementById('dateColle').value,'DD/MM/YYYY').startOf('day');\n    let el6 = document.getElementById('dataListe6')\n    let note = dataListe.getNote(el6);\n    let noNote='';\n    if(isNaN(parseInt(note))){\n      noNote=note;\n      note=null;\n    }\n    else{\n      note=parseInt(note);\n    }\n    let sujet = document.getElementById('sujet').value;\n    let obsCoordo = document.getElementById('obsCoordo').value;\n    let obsEleve = document.getElementById('obsEleve').value;\n    let mode = document.getElementById('addColleForm').getAttribute(\"data-mode\");\n    let idColle = '';\n    if (mode === 'modifier') {\n      idColle = document.getElementById('addColleForm').getAttribute(\"data-idcolle\")\n    }\n    $.post(\"/professeur/addOrModColle/\", {\n      \"date\": moment(date).format(),\n      \"idEleve\": idEleve,\n      \"idMatiereColle\": idMatiereColle,\n      \"idProfesseur\": idProfesseur,\n      \"note\": note,\n      \"noNote\": noNote,\n      \"sujet\": sujet,\n      \"obsCoordo\": obsCoordo,\n      \"obsEleve\": obsEleve,\n      \"mode\": mode, // mode : ajout ou modification d'une colle\n      \"idColle\": idColle //utile en cas de modif\n    }, () => {\n      let el1 = document.getElementById('dataListe1');\n      let idColle = dataListe.getId(el1);\n      $('#addColleModal').modal('hide');\n      //on rafraichit la table\n      refreshTableColle(idMatiereColle);\n    });\n  });\n\n\n\n  /*\n  ********************************************************************\n    Mise à jour de la table des colles\n  ************************************************************\n    */\n  refreshTableColle = function(idMatiereColle) {\n    $.post(\"/professeur/tableCollesJSON/\", {\n      'idMatiereColle': idMatiereColle,\n      'idProfesseur': idProfesseur,\n    }, (data) => {\n      $('#tableColles').DataTable().clear().draw();\n      $('#tableColles').DataTable().rows.add(data); // Add new data\n      $('#tableColles').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  }\n\n\n\n  /*\n  ********************************************************************\n    Suppression d'une colle\n  ************************************************************\n    */\n  suppColle = function(idMatiereColle, idColle) {\n    $.post(\"/professeur/suppColle/\", {\n      \"idColle\": idColle,\n        \"idProfesseur\": idProfesseur,\n        \"idMatiereColle\": idMatiereColle\n    }, () => {\n      refreshTableColle(idMatiereColle);\n    })\n  }\n\n\n\n  /*\n  ********************************************************************\n    Obtention de la liste des colles/matieres et mise à jour de la dataliste pour le professeur\n  ************************************************************\n    */\n  function getListeColles() {\n    $.post(\"/professeur/tableMesCollesClassesJSON/\", {\n      'idProfesseur': idProfesseur,\n    }, (data) => {\n      let el1 = document.getElementById('dataListe1')\n      dataListe.setDataListe(el1, data);\n    });\n  }\n\n\n\n  /*\n  **************************\n      fonction permettant d'afficher la liste des colles pour une matière/classe donnée\n   **************************\n   */\n\n  function format(d) {\n    // `d` is the original data object for the row\n    return '<table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"padding-left:50px;\">' +\n      '<tr>' +\n      '<td>obs. coordo:</td>' +\n      '<td>' + d.obsCoordo + '</td>' +\n      '</tr>' +\n      '<tr>' +\n      '<td>obs. élève:</td>' +\n      '<td>' + d.obsEleve + '</td>' +\n      '</tr>' +\n      '</table>';\n  };\n\n\n  function initDataTables() {\n    liste = []\n    $.fn.dataTable.moment('DD/MM/YYYY');\n    let table = $('#tableColles').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [\n        {\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.nom + ' ' + data.prenom;\n          },\n        },\n        {\n          data: null,\n          render: function(data, type, row) {\n            if(data.note===null){\n              return data.noNote;\n            }\n            return data.note;\n          },\n        },\n        {\n          data: \"date\",\n           render: function(data, type, row){\n               if(type === \"sort\" || type === \"type\"){\n                   return data;\n               }\n               return moment(data).format(\"DD/MM/YYYY\");\n           }\n        },\n        {\n          data: 'sujet'\n        },\n        {\n          \"className\": 'details-control',\n          \"orderable\": false,\n          \"data\": null,\n          \"defaultContent\": ''\n        },\n        {\n          data: null,\n          className: \"center\",\n          defaultContent: '<a href=\"\" class=\"editor_modif\">Edit</a>/<a href=\"\" class=\"editor_supp\">Supp</a>'\n        }\n      ],\n    },\n    {\n      \"order\": [[ 2, \"desc\" ]]\n    }\n  );\n\n\n    // Edit record\n    $('#tableColles').on('click', 'a.editor_modif', function(e) {\n      e.preventDefault();\n      var tr = $(this).closest('tr');\n      var row = table.row(tr);\n      let element = row.data();\n      let idColle = element.idColle;\n      let nom = element.nom;\n      let note = element.note;\n      if(element.note===null){note =element.noNote;}\n      let date = element.date;\n      let sujet = element.sujet;\n      let obsEleve = element.obsEleve;\n      let obsCoordo = element.obsCoordo;\n      // utiliser un data-action='modifier' ou data-action='supprimer'\n      document.getElementById('addColleForm').setAttribute(\"data-mode\", \"modifier\");\n      document.getElementById('addColleForm').setAttribute(\"data-idcolle\", idColle);\n      let el2 = document.getElementById('dataListe2')\n      dataListe.readOnly(el2, true);\n      dataListe.setName(el2, nom);\n      $(document.getElementById('dateColle')).val(moment(date).format('DD/MM/YYYY'));\n      $(document.getElementById('sujet')).val(sujet);\n      $(document.getElementById('obsEleve')).val(obsEleve);\n      $(document.getElementById('obsCoordo')).val(obsCoordo);\n      let el6 = document.getElementById('dataListe6')\n      dataListe.setLaNote(el6,note);\n\n      $('#addColleModal').modal();\n    });\n\n    // Supp record\n    $('#tableColles').on('click', 'a.editor_supp', function(e) {\n      e.preventDefault();\n      var tr = $(this).closest('tr');\n      var row = table.row(tr);\n      let element = row.data();\n      suppColle(element.idMatiereColle,  element.idColle);\n    });\n\n    $('#tableColles tbody').on('click', 'td.details-control', function() {\n      var tr = $(this).closest('tr');\n      var row = table.row(tr);\n      if (row.child.isShown()) {\n        // This row is already open - close it\n        row.child.hide();\n        tr.removeClass('shown');\n      } else {\n        // Open this row\n        row.child(format(row.data())).show();\n        tr.addClass('shown');\n      }\n    });\n  };\n\n\n  /*\n  ********************************************************************\n        PUBLIC\n  ************************************************************\n  */\n\n\n  self.init = () => {\n    //$('#addColleModal').on('shown.bs.modal', function() {\n    //   $('.summernote').summernote({\n    //     toolbar: [\n    //       ['style', ['bold', 'italic', 'underline', 'strike']],\n    //       ['para', ['ul', 'ol']],\n    //     ],\n    //     styleWithSpan: false,\n    //   });\n    // })\n    getListeColles();\n    initDataTables();\n  };\n\n\n  return self;\n\n})();\n\nmodule.exports = colles;\n\n\n//# sourceURL=webpack:///./src/professeur/colles.js?");

/***/ }),

/***/ "./src/professeur/decompteHeures.js":
/*!******************************************!*\
  !*** ./src/professeur/decompteHeures.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let decompteHeures = (function() {\n\n  let self = {};\n  let idProfesseur = document.body.getAttribute(\"data-idprofesseur\");\n\n\n  /*\n  ********************************************************************\n        PRIVE\n  ************************************************************\n*/\n\n\n\n\n\n\n\n  function initDataDecompteHeures() {\n\n    liste = []\n    $.fn.dataTable.moment('DD/MM/YYYY');\n    let table = $('#tableDecompte').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.classe + '-' + data.matiere;\n          },\n        },\n        {\n          data: 'count'\n        },\n        {\n            data: null,\n            render: function(data, type, row) {\n              // Combine the first and last names into a single table field\n              return Math.floor(data.heures / 60) + 'h' + data.heures % 60 + 'mn';\n            },\n          },\n\n      ],\n    });\n\n  };\n\n  /*\n  ********************************************************************\n        PUBLIC\n  ************************************************************\n  */\n  /*\n  ********************************************************************\n    Mise à jour de la table des colles\n  ************************************************************\n    */\n  self.refreshTableDecompteHeures = function() {\n    $.post(\"/professeur/tableDecompteHeuresJSON/\",{'idProfesseur' : idProfesseur} , (data) => {\n      console.log(data);\n      $('#tableDecompte').DataTable().clear().draw();\n      $('#tableDecompte').DataTable().rows.add(data); // Add new data\n      $('#tableDecompte').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  }\n\n\n  self.init = () => {\n    initDataDecompteHeures();\n  };\n\n\n  return self;\n\n})();\n\nmodule.exports = decompteHeures;\n\n\n//# sourceURL=webpack:///./src/professeur/decompteHeures.js?");

/***/ }),

/***/ "./src/professeur/paramCollesClasses.js":
/*!**********************************************!*\
  !*** ./src/professeur/paramCollesClasses.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n**************************\n      Script pour parametrer  les colles et classes du colleur\n **************************\n */\n\nlet paramCollesClasses = (function() {\n  let self = {};\n  let idProfesseur = $('body').data(\"idprofesseur\")\n  let dataListe = __webpack_require__(/*! ../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n\n  /********************************************************************\n        Choix de l'élève et de la colle à partir d'une dataListe\n  ************************************************************\n      */\n  let el3 = document.getElementById('dataListe3') //liste des classes\n  dataListe.selectId(el3);\n  let el4 = document.getElementById('dataListe4') //liste des classesmatieres\n  dataListe.selectId(el4);\n\n\n  /*\n  ********************************************************************\n        PRIVE\n  ************************************************************\n\n  ********************************************************************\n        Choix de la classe pour ensuite choisir la matière dans modal form\n  ************************************************************\n        */\n  $('#dataListe3Form').submit(function(e) {\n    e.preventDefault();\n    let classe = dataListe.getName(el3);\n    let idClasse = dataListe.getId(el3);\n    $.post(\"/professeur/listeMatiereClasseJSON/\", {\n      'idClasse': idClasse,\n    }, (data) => {\n      let el4 = document.getElementById('dataListe4')\n      dataListe.setDataListe(el4, data);\n      dataListe.display(el4, true);\n    });\n  });\n\n\n\n\n\n  /*\n  ********************************************************************\n        Validation du formulaire pour creer une matiere pour le colleur\n  ************************************************************\n        */\n  $('#addClasseForm').submit(function(e) {\n    e.preventDefault();\n    let classe = dataListe.getName(el3);\n    let idClasse = dataListe.getId(el3);\n    let e4 = document.getElementById('dataListe4')\n    let idClasseMatiere = dataListe.getId(e4)\n    console.log(idClasseMatiere);\n    $.post(\"/professeur/addMatiereProfesseurJSON/\", {\n      'idClasse': idClasse,\n      'idProfesseur': idProfesseur,\n      'idClasseMatiere': idClasseMatiere,\n    }, (message) => {\n      if (message.error !== \"ok\") {\n        $('#error').html(message.error);\n        $('#erreur').modal();\n      } else {\n        $('#addClasseProfesseur').modal('hide');\n        self.refreshTableMesCollesClasses();\n      }\n      dataListe.display(el4, false);\n      document.getElementById('addClasseForm').reset();\n    });\n  });\n\n\n  function getListeClasses() {\n    //Mettre à jour la liste des classes\n\n    $.get(\"/admin/tableClassesJSON/\", (data) => {\n      let el3 = document.getElementById('dataListe3')\n      dataListe.setDataListe(el3, data);\n    });\n  }\n\n\n  function initDataTablesMesCollesClasses() {\n    let liste = [];\n    let table = $('#tableMesCollesClasses').DataTable({\n\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: 'classe'\n        },\n        {\n          data: 'matiere'\n        },\n        {\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.nom + ' ' + data.prenom;\n          },\n        },\n        {\n          data: 'duree'\n        },\n      ],\n    });\n  };\n\n\n  /*\n  ********************************************************************\n        PUBLIC\n  ************************************************************\n        */\n\n  /*\n  ********************************************************************\n    Mise à jour de la table des colles\n  ************************************************************\n    */\n  self.refreshTableMesCollesClasses = function() {\n    $.post(\"/professeur/tableMesCollesClassesJSON/\", {\n      'idProfesseur': idProfesseur,\n    }, (data) => {\n      $('#tableMesCollesClasses').DataTable().clear().draw();\n      $('#tableMesCollesClasses').DataTable().rows.add(data); // Add new data\n      $('#tableMesCollesClasses').DataTable().columns.adjust().draw(); // Redraw the DataTable\n      let el1 = document.getElementById('dataListe1') //liste des colles du professeur\n      dataListe.setDataListe(el1, data); //on met a jour la dataliste\n      let el4 = document.getElementById('dataListe4') // on masque la liste des matieres/classes\n      dataListe.display(el4, false); // on la masque\n    });\n  }\n\n\n\n\n  self.init = () => {\n    getListeClasses();\n    initDataTablesMesCollesClasses();\n  }\n\n  return self;\n})();\n\nmodule.exports = paramCollesClasses;\n\n\n//# sourceURL=webpack:///./src/professeur/paramCollesClasses.js?");

/***/ }),

/***/ "./src/professeur/paramMesClasses.js":
/*!*******************************************!*\
  !*** ./src/professeur/paramMesClasses.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n**************************\n      Script onglet parametrage  les classes coordo\n **************************\n */\n\nlet paramMesClasses = (function() {\n  let self = {};\n  let idProfesseur = $('body').data(\"idprofesseur\")\n  let dataListe = __webpack_require__(/*! ../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n\n\n  /*\n  ********************************************************************\n        PRIVE\n  ************************************************************\n*/\n  function initDataTablesMesClasses() {\n    liste = []\n    let table = $('#tableMesClasses').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n          data: 'classe'\n        },\n        {\n          data: 'matiere'\n        },\n        {\n          data: null,\n          render: function(data, type, row) {\n            // Combine the first and last names into a single table field\n            return data.nom + ' ' + data.prenom;\n          },\n        },\n      ]\n    });\n\n\n  };\n\n\n  /*\n  ********************************************************************\n    Mise à jour de la table des colles\n  ************************************************************\n    */\n  refreshTableMesClasses = function() {\n    $.post(\"/professeur/tableMesClassesJSON/\", {\n      'idProfesseur': idProfesseur,\n    }, (data) => {\n      $('#tableMesClasses').DataTable().clear().draw();\n      $('#tableMesClasses').DataTable().rows.add(data); // Add new data\n      $('#tableMesClasses').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  }\n\n\n  /*\n  ********************************************************************\n        PUBLIC\n  ************************************************************\n        */\n\n\n\n\n  self.init = () => {\n    initDataTablesMesClasses();\n    refreshTableMesClasses();\n  }\n\n  return self;\n})();\n\nmodule.exports = paramMesClasses;\n\n\n//# sourceURL=webpack:///./src/professeur/paramMesClasses.js?");

/***/ }),

/***/ "./src/professeur/resultats.js":
/*!*************************************!*\
  !*** ./src/professeur/resultats.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let resultats = (function() {\n\n  let self = {};\n  let dataListe = __webpack_require__(/*! ../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n  let el7 = document.getElementById('dataListe7') //liste des élèves\n  dataListe.selectId(el7)\n\n\n\n\n/*\n********************************************************************\n      PRIVE\n************************************************************\n*/\n\n\n\n/*\n********************************************************************\n      Choix de la matiere / classe du coordo\n************************************************************\n*/\n\n$('#dataListe7Form').submit(function(e) {\n  e.preventDefault();\n  let el7 = document.getElementById('dataListe7') //liste des matieresClasse du coordo\n  let classeMatiere = dataListe.getName(el7);\n  let idClasseMatiere = dataListe.getId(el7);\n  if (idClasseMatiere != '') {\n    $('#tabResultatsCoordo').css(\"display\", \"block\");\n    refreshTablesResultatsCoordo(idClasseMatiere);\n  } else {\n    $('#tabResultatsCoordo').css(\"display\", \"none\");\n  }\n});\n\n\n\n/*\n********************************************************************\n  Mise à jour de la table des colles\n************************************************************\n  */\nrefreshTablesResultatsCoordo = function(idClasseMatiere) {\n  $.post(\"/professeur/tableResultatsCoordoJSON/\", {\n    'idClasseMatiere': idClasseMatiere,\n  }, (data) => {\n    let table = $('#tableResultatsCoordo').DataTable();\n    table.clear().draw();\n    table.rows.add(data); // Add new data\n    table.columns.adjust().draw(); // Redraw the DataTable\n  });\n}\n\n\n\nfunction initDataTablesResultatsCoordo() {\n  liste = []\n  $.fn.dataTable.moment('DD/MM/YYYY');\n  let table = $('#tableResultatsCoordo').DataTable({\n    retrieve: true,\n    data: liste,\n    // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n    language: {\n      processing: \"Traitement en cours...\",\n      search: \"Rechercher&nbsp;:\",\n      lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n      info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n      infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n      infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n      infoPostFix: \"\",\n      loadingRecords: \"Chargement en cours...\",\n      zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n      emptyTable: \"Aucune donnée disponible dans le tableau\",\n      paginate: {\n        first: \"Premier\",\n        previous: \"Pr&eacute;c&eacute;dent\",\n        next: \"Suivant\",\n        last: \"Dernier\"\n      },\n      aria: {\n        sortAscending: \": activer pour trier la colonne par ordre croissant\",\n        sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n      }\n    },\n\n    columns: [{\n      data: null,\n      render: function(data, type, row) {\n        // Combine the first and last names into a single table field\n        return data.nomE + ' ' + data.prenomE;\n      },\n    },\n      {\n        data: null,\n        render: function(data, type, row) {\n          let notes=''\n          data.notes.forEach(function(value) {\n            notes += value+';'\n          });\n          return notes;\n        },\n      },\n      {\n        data: 'moyenne'\n      },\n      {\n        data: \"rank\",\n        defaultContent: ''\n      },\n    ],\n    drawCallback: function () {\n         api = this.api();\n         var arr = api.columns(2).data()[0];  //get array of column 3 (extn)\n         var sorted = arr.slice().sort(function(a,b){return b-a});\n         var ranks = arr.slice().map(function(v){ return sorted.indexOf(v)+1 });\n         // interate through each row\n         api.rows().every( function ( rowIdx, tableLoop, rowLoop ) {\n           var data = this.data();\n           data.rank= ranks[arr.indexOf(data.moyenne)];  //set the rank column = the array index of the extn in the ranked array\n         } );\n       api.rows().invalidate();\n     }\n\n  });\n};\n/*\n********************************************************************\n      PUBLIC\n************************************************************\n*/\n\n\nself.init = () => {\n initDataTablesResultatsCoordo();\n};\n\n\nreturn self;\n\n})();\n\nmodule.exports = resultats;\n\n\n//# sourceURL=webpack:///./src/professeur/resultats.js?");

/***/ }),

/***/ "./src/professeur/synthese.js":
/*!************************************!*\
  !*** ./src/professeur/synthese.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let synthese = (function() {\n\n  let self = {};\n  let idProfesseur = document.body.getAttribute(\"data-idprofesseur\");\n  let dataListe = __webpack_require__(/*! ../dataListe/dataListe.js */ \"./src/dataListe/dataListe.js\");\n\n  let el5 = document.getElementById('dataListe5') //liste des élèves\n  dataListe.selectId(el5)\n\n\n  /*\n  ********************************************************************\n        PRIVE\n  ************************************************************\n\n\n  /*\n  ********************************************************************\n        Choix de la matiere / classe du coordo\n  ************************************************************\n  */\n\n  $('#dataListe5Form').submit(function(e) {\n    e.preventDefault();\n    let el5 = document.getElementById('dataListe5') //liste des matieresClasse du coordo\n    let classeMatiere = dataListe.getName(el5);\n    let idClasseMatiere = dataListe.getId(el5);\n    if (idClasseMatiere != '') {\n      $('#tabCollesCoordo').css(\"display\", \"block\");\n      refreshTableCoordo(idClasseMatiere);\n    } else {\n      $('#tabCollesCoordo').css(\"display\", \"none\");\n    }\n  });\n\n\n\n  /*\n  **************************\n      fonction permettant d'afficher la liste des colles pour une matière/classe donnée\n   **************************\n   */\n\n  function formatCoordo(d) {\n    // `d` is the original data object for the row\n    return '<table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"padding-left:50px;\">' +\n      '<tr>' +\n      '<td>Sujet:</td>' +\n      '<td>' + d.sujet + '</td>' +\n      '</tr>' +\n      '<tr>' +\n      '<td>obs. coordo:</td>' +\n      '<td>' + d.obsCoordo + '</td>' +\n      '</tr>' +\n      '<tr>' +\n      '<td>obs. élève:</td>' +\n      '<td>' + d.obsEleve + '</td>' +\n      '</tr>' +\n      '</table>';\n  };\n\n\n  /*\n  ********************************************************************\n    Mise à jour de la table des colles\n  ************************************************************\n    */\n  refreshTableCoordo = function(idClasseMatiere) {\n    $.post(\"/professeur/tableCollesCoordoJSON/\", {\n      'idClasseMatiere': idClasseMatiere,\n    }, (data) => {\n      $('#tableCollesCoordo').DataTable().clear().draw();\n      $('#tableCollesCoordo').DataTable().rows.add(data); // Add new data\n      $('#tableCollesCoordo').DataTable().columns.adjust().draw(); // Redraw the DataTable\n    });\n  }\n\n\n  function initDataTablesCoordo() {\n    liste = []\n    $.fn.dataTable.moment('DD/MM/YYYY');\n    let table = $('#tableCollesCoordo').DataTable({\n      retrieve: true,\n      data: liste,\n      // dom : '<\"top\"Bif>rt<\"bottom\"lp><\"clear\">',\n      language: {\n        processing: \"Traitement en cours...\",\n        search: \"Rechercher&nbsp;:\",\n        lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n        info: \"Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n        infoEmpty: \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n        infoFiltered: \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n        infoPostFix: \"\",\n        loadingRecords: \"Chargement en cours...\",\n        zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n        emptyTable: \"Aucune donnée disponible dans le tableau\",\n        paginate: {\n          first: \"Premier\",\n          previous: \"Pr&eacute;c&eacute;dent\",\n          next: \"Suivant\",\n          last: \"Dernier\"\n        },\n        aria: {\n          sortAscending: \": activer pour trier la colonne par ordre croissant\",\n          sortDescending: \": activer pour trier la colonne par ordre décroissant\"\n        }\n      },\n\n      columns: [{\n        data: null,\n        render: function(data, type, row) {\n          // Combine the first and last names into a single table field\n          return data.nomE + ' ' + data.prenomE;\n        },\n      },\n      {\n        data: null,\n        render: function(data, type, row) {\n          // Combine the first and last names into a single table field\n          return data.nomP + ' ' + data.prenomP;\n        },\n      },\n      {\n        data: null,\n        render: function(data, type, row) {\n          if(data.note===null){\n            return data.noNote;\n          }\n          return data.note;\n        },\n      },\n        {\n          data: \"date\",\n           render: function(data, type, row){\n               if(type === \"sort\" || type === \"type\"){\n                   return data;\n               }\n               return moment(data).format(\"DD/MM/YYYY\");\n           }\n        },\n        {\n          \"className\": 'details-control',\n          \"orderable\": false,\n          \"data\": null,\n          \"defaultContent\": ''\n        },\n      ]\n    });\n\n    $('#tableCollesCoordo tbody').on('click', 'td.details-control', function() {\n      var tr = $(this).closest('tr');\n      var row = table.row(tr);\n      if (row.child.isShown()) {\n        // This row is already open - close it\n        row.child.hide();\n        tr.removeClass('shown');\n      } else {\n        // Open this row\n        row.child(formatCoordo(row.data())).show();\n        tr.addClass('shown');\n      }\n    });\n  };\n\n  /*\n  ********************************************************************\n        PUBLIC\n  ************************************************************\n  */\n\n\n  self.init = () => {\n    initDataTablesCoordo();\n  };\n\n\n  return self;\n\n})();\n\nmodule.exports = synthese;\n\n\n//# sourceURL=webpack:///./src/professeur/synthese.js?");

/***/ })

/******/ });